# Import base_config from git
import_from_git(url: 'https://github.com/rakutentech/ios-buildconfig.git')

default_platform(:ios)

platform :ios do
  desc "Project update"
  lane :updatePods do |options|
    git_submodule_update
    cocoapods(repo_update: ENV['MA_FL_CP_REPO_UPDATE'] || false)
  end

  desc "Check lint"
  lane :ci do |options|
    swiftlint(
      strict: true,
      ignore_exit_status: false
    )
# Uncomment this to disable Unit tests on Bitrise
#     if !is_ci
       tests
#     end

  end

  desc "Unit tests"
  lane :tests do |options|
      xcversion(version: "~> 13.2")
      updatePods
      fetched_sim = sh("xcrun simctl list | grep 'Fastlane' | cat")
      if !fetched_sim.empty?
          sh("xcrun", "simctl", "delete", "iPhone Fastlane")
      end
      sh("xcrun","simctl","create","iPhone Fastlane", "com.apple.CoreSimulator.SimDeviceType.iPhone-8","com.apple.CoreSimulator.SimRuntime.iOS-15-2")
      scan(
        clean: true,
        output_directory: './artifacts/unit-tests',
        scheme: 'MiniApp_Tests',
        device: 'iPhone Fastlane',
        code_coverage: true,
        output_types: 'json-compilation-database,html,junit',
        output_files: 'compile_commands.json,report.html,report.junit')
  end

  lane :build_simulator do |options|
    xcversion(version: "~> 13.2")

    updatePods

    increment_build_number(
      build_number: ENV["BITRISE_BUILD_NUMBER"] # set a specific number
    )

    # configure Analytics SDK
    set_info_plist_value(path: "./Example/Info.plist", key: "RATAccountIdentifier", value: ENV['RAT_ACCOUNT_IDENTIFIER'].to_i)
    set_info_plist_value(path: "./Example/Info.plist", key: "RATAppIdentifier", value: ENV['RAT_APP_IDENTIFIER'].to_i)

    xcodebuild(
      archive: true,
      archive_path: "artifacts/MiniApp-Example.xcarchive",
      workspace: "MiniApp.xcworkspace",
      scheme: "MiniApp-Example",
      xcargs: "-configuration Debug -sdk 'iphonesimulator' -destination 'generic/platform=iOS Simulator' -derivedDataPath 'artifacts/derivedData'"
    )

    copy_artifacts(
      target_path: "artifacts",
      artifacts: ["./artifacts/MiniApp-Example.xcarchive/Products/Applications/MiniApp_Example.app","./artifacts/MiniApp-Example.xcarchive/dSYMs/MiniApp_Example.app.dSYM"]
    )

  end

  desc "Create pull request for candidate branch"
  lane :candidate_pr do |options|
      create_pull_request(
        repo: "rakutentech/ios-miniapp",
        title: "Candidate",
        head: "candidate",       # optional, defaults to current branch name
        base: "master", # optional, defaults to "master"
        body: "This is the candidate merge after a successful SDK release"       # optional
      )
  end
  
  lane :create_release do |options|
      Dir.chdir("..") do
          sh("./scripts/build-framework.sh")
      end
      push_to_git_remote()
      set_github_release(
          repository_name: "rakutentech/ios-miniapp",
          api_token: ENV["GITHUB_API_TOKEN"],
          name: "Miniapp",
          tag_name: "v"+File.read("../tmp/version.env"),
          description: (File.read("../tmp/CHANGELOG.md") rescue "No changelog provided"),
#           commitish: "candidate", # uncomment this line to enforce tag to be on candidate branch
          upload_assets: ["./Binary/XCFramework/MiniApp.xcframework.zip"]
       )
  end
end
